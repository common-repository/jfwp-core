<?php

namespace jf\core\reflection;

class Test
{
    public $name = 'nicolas';
    
    public function getName()
    {
        return $this->name;
    }
    
    private static $_hello = 'hello';
    
    public static function publicStaticHello()
    {
        return self::$_hello;
    }
    
    protected static function protectedStaticHello()
    {
        return self::$_hello;
    }

    private static function privateStaticHello()
    {
        return self::$_hello;
    }
    
    public function publicHello()
    {
        return self::$_hello;
    }
    
    protected function protectedHello()
    {
         return self::$_hello;
    }
    
    private function privateHello()
    {
         return self::$_hello;
    }
}

/**
 * Test class for ClosureReflection.
 * Generated by PHPUnit on 2011-03-28 at 14:57:42.
 */
class ClosureReflectionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ClosureReflection
     */
    protected $instance;
    protected $classReflection;
    protected $objectReflection;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->instance = new Test();
        
        $this->classReflection = new ClosureReflection('jf\core\reflection\Test');
        $this->classReflection->reflect();
        
        $this->objectReflection = new ClosureReflection($this->instance);
        $this->objectReflection->reflect();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->classReflection->reflect();
        $this->objectReflection->reflect();
    }

    /**
     * @todo Implement testGetClosure().
     */
    public function testGetClosure()
    {
        $this->assertInstanceOf('Closure', $this->classReflection->getClosure('test_publicstatichello'));
        
        $this->assertInstanceOf('Closure', $this->objectReflection->getClosure('test_publichello'));
        
        $this->classReflection->reflect(array('prefix'=>'jf'));
        $this->assertInstanceOf('Closure', $this->classReflection->getClosure('jf_test_publicstatichello'));
        
        $this->objectReflection->reflect(array('prefix'=>'jf'));
        $this->assertInstanceOf('Closure', $this->objectReflection->getClosure('jf_test_publichello'));
        
        $this->setExpectedException('InvalidArgumentException');
        $this->classReflection->getClosure('jf_test_publichello');
    }

    /**
     * @todo Implement testGetClosures().
     */
    public function testGetClosures()
    {
       $this->assertEquals(1, sizeof($this->classReflection->getClosures()));
       
       $this->assertEquals(3, sizeof($this->objectReflection->getClosures()));
    }
    
    public function testCountable()
    {
       $this->assertEquals(1, sizeof($this->classReflection));
       
       $this->assertEquals(3, sizeof($this->objectReflection));
    }

    /**
     * @todo Implement testReflect().
     */
    public function testReflect()
    {
        $test_publicstatichello = $this->classReflection->getClosure('test_publicstatichello');
        $this->assertEquals('hello', $test_publicstatichello());
        
        $test_getname = $this->objectReflection->getClosure('test_getname');
        $this->assertEquals('nicolas', $test_getname());
        
        $this->instance->name = 'eric';
        $this->assertEquals('eric', $test_getname());
    }
}
?>
