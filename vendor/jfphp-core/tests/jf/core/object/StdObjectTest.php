<?php
namespace jf\core\object;


/**
 * Test class for StdObject.
 * Generated by PHPUnit on 2011-02-09 at 13:28:53.
 */
class StdObjectTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var StdObject
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $data = array('property1' => 'value1',
                      'property2' => 'value2',
                      'child1' => array('property1' => 'value1', 'property2' => 'value2'),
                      'child2' => array('property1' => 'value1', 
                      					'property2' => 'value2',
                                        'subchild1' => array('property1' => 'value1', 'property2' => 'value2'),
                                        'subchild2' => array('property1' => 'value1', 'property2' => 'value2'))); 
        
        $this->object = new StdObject($data);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testGetStdClass().
     */
    public function testGetStdClass()
    {
        $this->assertInstanceOf('stdClass', $this->object->getStdClass());
    }

    
    /**
     * @expectedException PHPUnit_Framework_Error
     */
    public function test__get()
    {
        $this->assertEquals($this->object->child1->property1, 'value1');
        
        try {
            $this->object->child1->property3;
        }
        catch(LogicException $e){
            return;
        }
        
        $this->fail('An expected exception has not been raised.');
    }

    /**
     * @todo Implement test__set().
     */
    public function test__set()
    {
        $this->object->child1 = 'newvalue';
        $this->assertEquals($this->object->child1, 'newvalue');
        
        $this->object->child3 = array('property1' => 'value1', 'property2' => 'value2');
        $this->assertEquals($this->object->child3->property1, 'value1');
    }
    
 	/**
     * @todo Implement test__isset().
     */
    public function test__isset()
    {
       $this->assertTrue(isset($this->object->child1));
       $this->assertFalse(isset($this->object->child3));
    }
    
 	/**
     * @todo Implement test__unset().
     */
    public function test__unset()
    {
        unset($this->object->child1);
        $this->assertFalse(isset($this->object->child1));
    }
}
?>
