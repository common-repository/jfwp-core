<?php
namespace jf\core\object;



/**
 * Test class for HierachicalStdObject.
 * Generated by PHPUnit on 2011-02-09 at 15:06:35.
 */
class HierachicalStdObjectTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var HierachicalStdObject
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $data = array('property1' => 'value1',
                      'property2' => 'value2',
                      'child1' => array('property1' => 'value1', 'property2' => 'value2'),
                      'child2' => array('property1' => 'value1', 
                      					'property2' => 'value2',
                                        'subchild1' => array('property1' => 'value1', 'property2' => 'value2'),
                                        'subchild2' => array('property1' => 'value1', 'property2' => 'value2')));
        
        $this->object = new HierachicalStdObject('root', $data);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testGetId().
     */
    public function testGetId()
    {
        $this->assertEquals('root', $this->object->getId());   
    }

    /**
     * @todo Implement test__set().
     */
    public function test__set()
    {
       $this->object->property3 = 'value3';
       $this->assertEquals('value3', $this->object->property3);
       
       $this->object->child3 = array('property1' => 'value1', 'property2' => 'value2');
       $this->assertInstanceOf('jf\core\object\HierachicalStdObject', $this->object->getChildById('child3'));
    }

    /**
     * @todo Implement testAddChild().
     */
    public function testAddChild()
    {
       $data = array('property1' => 'value1', 'property2' => 'value2');
       $child3 = new HierachicalStdObject('child3', $data);

       $this->object->addChild($child3);
       $this->assertInstanceOf('jf\core\object\HierachicalStdObject', $this->object->getChildById('child3'));
       
       $this->setExpectedException('RuntimeException');
       $this->object->addChild($child3);
    }

    /**
     * @todo Implement testRemoveChild().
     */
    public function testRemoveChild()
    {
       $this->object->removeChild($this->object->getChildById('child2'));
       $this->assertNull($this->object->getChildById('child2'));
    }

    /**
     * @todo Implement testHasChildren().
     */
    public function testHasChildren()
    {
       $this->assertTrue($this->object->hasChildren());
       
       $this->object->removeChild($this->object->getChildById('child1'));
       $this->object->removeChild($this->object->getChildById('child2'));
       
       $this->assertFalse($this->object->hasChildren());
    }

    /**
     * @todo Implement testContainsChild().
     */
    public function testContainsChild()
    {
       $child1 = $this->object->getChildById('child1');
       $this->assertTrue($this->object->containsChild($child1));
       
       $this->object->removeChild($child1);
       $this->assertFalse($this->object->containsChild($child1));
    }

    /**
     * @todo Implement testGetChildren().
     */
    public function testGetChildren()
    {
       $childrens = $this->object->getChildren();
       $this->assertEquals(2, sizeof($childrens));

       $this->assertInstanceOf('jf\core\object\HierachicalStdObject', $childrens[0]);
    }

    /**
     * @todo Implement testGetChildenById().
     */
    public function testGetChildenById()
    {
        $this->assertInstanceOf('jf\core\object\HierachicalStdObject', $this->object->getChildById('child1'));
        $this->assertNull($this->object->getChildById('child3'));
    }
}
?>
